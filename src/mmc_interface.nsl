#include "mmcspi.h"
#include "mmc_interface.h"
#include "ASYNCRX.h"
#include "ASYNCTX.h"
#include "100kHz_Gen.h"

#define READ 2'b01
#define WRITE 2'b10
#define RESET 2'b11

module mmc_interface{

    reg clk;
    reg inited = 0;
    reg req_flag;
	func_self falling_edge();
	func_self rising_edge();
    reg req[2] = 2'b00;
    reg adrs[12];
    reg byteena[3];
    reg data[32];
	reg clk100kHz;
    proc_name reset_req();
    proc_name send_req(req,adrs,byteena,data);

    mmcspi rv32x_mmcspi;
	ASYNCTX tx;
	ASYNCRX rx;
    mmcStartupClkGen mscGen;

	mscGen.m_clock = clk25MHz;
    rv32x_mmcspi.m_clock = if(!inited) mscGen.clk100kHz else clk25MHz;
    rv32x_mmcspi.clk = if(!inited) mscGen.clk100kHz else clk25MHz;
    //clk_slave := rv32x_mmcspi.SCLK;
    //SCLK = clk_slave;
    SCLK = rv32x_mmcspi.SCLK;
	MOSI = rv32x_mmcspi.MOSI;
	CS = rv32x_mmcspi.CS;
	rv32x_mmcspi.MISO = MISO;
	rdata = rv32x_mmcspi.rdata;
	tx.aTxIn = rv32x_mmcspi.rxout;
	rv32x_mmcspi.rxin = tx.aTxOut;
	rx.aRxIn = rv32x_mmcspi.txout;
	rv32x_mmcspi.txin = rx.aRxOut;

    func reset{
        if(!send_req) send_req(RESET,0,0,0);
    }

    func read{
        if(!send_req) send_req(READ,read_adrs,byteen,0);
    }

    func write{
        if(!send_req) send_req(WRITE,write_adrs,byteen,wdata);
    }

    proc send_req{
        req_flag := 1;
        if(!req_flag) tx.aTxReq();
        any{
            req == RESET:   rv32x_mmcspi.reset();
            req == READ:    rv32x_mmcspi.read(adrs,byteena);
            req == WRITE:   rv32x_mmcspi.write(adrs,byteena,data);
        }
    }

	func tx.aTxAck seq{
            {
                send_req.finish();
                if(req != RESET) valid();
            }
            req_flag := 0;
	}
    
	func rx.aRxReq{ 
        any{
            rv32x_mmcspi.finish_init: inited := 1;	
            rv32x_mmcspi.interrupt_req: interrupt_req();
        }   	
        rx.aRxAck();
	}

    #ifdef CV
	rv32x_mmcspi.SW = SW;

	func rv32x_mmcspi.debug_led_1{
		debug_led_1();
	}	
	func rv32x_mmcspi.debug_led_2{
		debug_led_2();
	}	
	func rv32x_mmcspi.debug_led_3{
		debug_led_3();
	}	
	func rv32x_mmcspi.debug_led_4{
		debug_led_4();
	}	
	func rv32x_mmcspi.debug_led_5{
		debug_led_5();
	}
	func rv32x_mmcspi.debug_led_6{
		debug_led_6();
	}
	func rv32x_mmcspi.debug_led_7{
		debug_led_7();
	}
	func rv32x_mmcspi.debug_led_8{
		debug_led_8();
	}
	func rv32x_mmcspi.debug_pc_led{
		debug_pc_led(rv32x_mmcspi.pc_led);
	}
	func rv32x_mmcspi.debug_sseg_h8{
		//debug_sseg_h8(rv32x_mmcspi.sseg_h8);
	}
	func rv32x_mmcspi.debug_sseg_l16{
		//debug_sseg_l16(rv32x_mmcspi.sseg_l16);
	}
	func rv32x_mmcspi.debug_sseg_l12{
		debug_sseg_l12(rv32x_mmcspi.sseg_l12);
	}
	func rv32x_mmcspi.debug_sseg_h12{
		debug_sseg_h12(rv32x_mmcspi.sseg_h12);
	}
    
    #endif
}